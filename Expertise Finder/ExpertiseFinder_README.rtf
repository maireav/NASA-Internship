{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13860\viewh14680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hi ! Thanks for accessing my files. This document contains a bunch of information and explanation of how my code works. Please take the time to read over the NECESSARY PACKAGES & ITEMS and the ABOUT THE CODE sections. If you come across specific questions when running, please take a look at THE DETAILS section in case your questions has already been addressed there. Thanks !\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
NECESSARY PACKAGES & ITEMS\
These modules and packages should be installed before attempting to run my code:\
- pandas\
- ads\
- operator\
- re\
- nltk\
    - nltk.tokenize\
    - nltk.stem\
- fnmatch\
\
These are the primary .py files that make up the \'93Expertise Finder\'94:\
- ExpertiseFinder_MSI.py\
- TextAnalysis.py\
\
The user may use their own file containing stop words for language processing while using the \'93Expertise Finder\'94, or use the file provided on GitHub:\
- stopwords.txt\
\
PLEASE NOTE: A user must also have their own NASA ADS API token. This is a long string of characters generated by ADS that gives you access to their API. You can find instructions on how to get an ADS token here: {\field{\*\fldinst{HYPERLINK "https://ads.readthedocs.io/en/v1/api-key.html"}}{\fldrslt https://ads.readthedocs.io/en/v1/api-key.html}}.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
ABOUT THE CODE\
This collection of functions and files was developed over several months while working as a USRA intern at NASA HQ. It was built in response to NASA\'92s call to expand and improve the diversity of its pool of potential proposal reviewers. The \'93Expertise Finder\'94 and its component/associated functions query Harvard-NASA\'92s ADS API to determine the expertise of a researcher based on their name and/or institution and the most common words and phrases found in the abstracts of papers published on NASA ADS.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 This code is heavily based on functions within the ads python package written by Vladimir Sudilovsky & Andy Casey, Geert Barentsen, Dan Foreman-Mackey, Miguel de Val-Borro, and Jonny Elliott. Please see more documentation on their work here: https://ads.readthedocs.io/en/latest/. I cannot thank these coders enough for making my code a possibility. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
THE DETAILS\
In this section, you will find a (relatively) detailed description of the purpose and functionality of each function contained within the file \'93ExpertiseFinder_MSI.py\'94, beginning with the primary functions of the package.\
\
\'97THE \'93EXPERTISE FINDER\'94\'97\
All functions beginning with \'93expertiseFinder\'94 all serve a similar purpose: take in a file or string containing researcher names and their affiliate institutions, search the name and institution information on NASA ADS, and then return an output containing the input data and, in addition, the top words and phrases from each researcher\'92s papers published on ADS. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 But how does the expertise finder pick papers from ADS ? The \'93strictness\'94 keyword argument determines the sequence of filters that will be used to make this choice. NASA ADS is slightly \'93messy\'94 when returning results in a name search. Sometimes, ADS has results that have incorrect names and/or institutions, other times, the name or institution may be correct, but come from a database outside of astronomy. The \'93filters\'94 that occur in step 6 of all of the \'93expertise finder\'94 functions are designed to remove erroneous search results. In some (not all) of the expertise finder functions, the user will be able to choose between \'93low\'94, \'93high\'94, and \'93default\'94 strictness. Please read the description of how each level affects the filters within the individual functions in the .py file itself. Here is a quick summary:\
- LOW strictness triggers filters that permit an exact author match, a close institution match, or the presence of a journal name. \
- HIGH strictness triggers filters that permit a relevant journal name AND an exact author match or a close institution match. \
- DEFAULT strictness triggers filters that permit a close author match AND close institution match, OR an exact author match, OR a close institution match, OR a relevant journal name.\
The user will also notice that, for the majority of expertise finders, they return two items: one \'93dirty\'94, one \'93clean\'94. The \'93clean\'94 data refers to the data pulled from papers that DID meet the filter criteria. These papers and their data are considered to be affiliated with the author and institution defined in the input. The \'93dirty\'94 data contains the papers and top words that DID NOT meet the filter criteria. The author of these papers may not match the author the user searched for, or maybe the institution is not present in the paper\'92s affiliations. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Below is a discussion of how each expertise finder is different, and in which context they are most useful.\
expertiseFinder(): Best for processing a large spreadsheet of names and institutions. Offers the most customizable strictness options.\
expertiseFinder_lowStrictness(): Best for processing a large spreadsheet of names and institutions. Has the least stingiest filters when sorting papers, so it may be useful to use for less common names and/or institutions. Offers no further customization in terms of filters.\
expertiseFinder_highStrictness(): Best for processing a large spreadsheet of names and institutions. Has the most stingiest filters when sorting papers; it queries both name AND affiliation when searching ads. It may be useful when searching for more common names and/or institutions. Offers no further customization of filters.\
expertiseFinder_singleName(): This function is made for processing a single string for a researcher\'92s name, and a single string of their affiliated institution. It is best for finding information on only one person. This function also offers customization in strictness to accommodate more common and rare names & institutions.\
instFinder(): Although this function does not have \'93expertise finder\'94 in its name, it is still related. This function takes just a single institution name and returns a non-duplicate list of all of the faculty with said institution in their first author affiliation on ADS.\
expertiseFinder_NameOrInst(): This function was designed to determine the astronomical expertises of the top first authors from a desired institution. It combines the functionality of expertiseFinder_singleName() and instFinder(). It is best used when researching those affiliated with a single institution. Again, it has customizable filters. This function returns a single spreadsheet with \'93dirty\'94 and \'93clean\'94 data labelled in a final column. \
\
\'97THE STEPS\'97\
One may notice that, within \'93ExpertiseFinder_MSI.py\'94, the beginning half of the file contains functions with names such as \'93step4\'94, step6\'94, etc. These functions are the building blocks for all of the expertise finder functions.\
step12(): Load and truncate the input file based on start and count values.\
step3(): Use the ads package\'92s function ads.SearchQuery to search NASA ADS API for paper information.\
step4(): Collects bibcode metadata on each paper found in step3().\
step5(): Pulls out all other relevant metadata for each bibcode found in step4().\
step6(): This is the step in which filters are applied to all of the papers and their metadata found in step5(). Depending on strictness choices in some functions to decide which version will be used: step6_expertiseFinder(), step6_expertiseFinderNameInst(), step6_expertiseFinder_singleName(), or step6_mostStrict().\
step7(): This step merges all of the clean and dirty data into their own spreadsheets, and merges the metadata for every paper by each author into single strings to prepare for analysis.\
step8(): Analyzes the clean and dirty data for each author\'92s papers for top words, bi-grams, and tri-grams.\
\
\'97THE CLEANERS\'97\
This collection of functions work to \'93clean up\'94 the outputs from expertise finders. For those expertise finders with two outputs, these functions compare the dirty and clean data to the original input file to find what names successfully found clean data, which names only had dirty data in ADS, and which names turned up no results and are missing from both the dirty and clean spreadsheets. Both return three items: dirtyDf, containing the names and info of authors that only had dirty data; cleanDf, containing the names and info of authors that had clean data; missingNames, containing the names of authors who had no data at all in ADS.\
dirtyCleaner_moreStrict(): This function removes names from dirtyDf that are present in cleanDf.\
dirtyCleaner_moreStrict(): This function keeps names in cleanDf that also appear in dirtyDf.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
I would like to give special thanks to Antonino Cucchiara, my supervisor and guide at NASA, who offered invaluable guidance and input while I developed this code. I would also like to thank the great people at NASA HQ APD for their constant encouragement and support. Thank you to USRA and the internship coordinators for offering such a special opportunity to work at NASA HQ for almost a full year. This experience was life-changing. \
\
Please do not hesitate to contact me via GitHub with any comments, questions, concerns, or bugs. Happy coding !\
}